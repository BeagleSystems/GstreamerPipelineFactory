#Code to switch camera stream to the client. Both camera 1 and camera 2 are operational, streams to GCS only the feed that is requested. 


#Advantages:
# Cam1 and Cam2 are always ready to stream, can be switched easily. 

#Disadvantage:
# Highly complex system compared to existing gstreamer initalisation. 


#CREATE PIPE1 - CAM1 
gst-client pipeline_create pipe1 nvarguscamerasrc sensor_id=0 ! 'video/x-raw(memory:NVMM), format=NV12, width=1280, height=720, framerate=59/1' ! interpipesink name=cam1 sync=false

#CREATE PIPE2 - CAM2
gst-client pipeline_create pipe2 nvarguscamerasrc sensor_id=1 ! 'video/x-raw(memory:NVMM), format=NV12, width=1280, height=720, framerate=59/1' ! interpipesink name=cam2 sync=false

#CREATE PIPE3 - FOR STREAMING
gst-client pipeline_create pipe3 interpipesrc name=interpipesrc1 listen-to=cam1 ! nvvidconv ! 'video/x-raw, width=640, height=480, format=NV12, framerate=30/1' ! omxh264enc profile=8 control_rate=2 insert-sps-pps=1 iframeinterval=2 ! 'video/x-h264,stream-format=avc,bitrate=4000000' ! rtph264pay ! 'application/x-rtp,payload=96' ! udpsink host=192.168.2.95 port=8554 sync=false async=false



#TO START PLAYING
gstd-client pipeline_play pipe1 (CAM 1)
gstd-client pipeline_play pipe2 (CAM 2)
gstd-client pipeline_play pipe3 (STREAM)


#TO STOP
gstd-client pipeline_stop pipe1 (CAM 1)
gstd-client pipeline_stop pipe2 (CAM 2)
gstd-client pipeline_stop pipe3 (STREAM)


#TO STOP AND DELETE PLAYING
gstd-client pipeline_delete pipe1 
gstd-client pipeline_delete pipe2 
gstd-client pipeline_delete pipe3 

#SWITCH LISTENER FROM CAM1 to CAM2
gst-client element_set name=interpipesrc1 listen_to cam2